# -*- coding: utf-8 -*-
"""synthetic_data_generator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Favva8SJYH_uFh8AuoVhRZnmyjJrTP8c

# Week 3 project - Create dataset about competitors

# Brief - a research tool for businesses about their client in their area

The tool will:


1.   Find businesses across the same location using google maps.
2.   Compare business plans and services
3.   advise and help to client to imporve their bussiness accroding to the   their competitors

# imports and installations
"""

!pip install bs4 openai google-api-python-client gradio

"""**Define categories**"""

categories = """
`accommodation`
`accommodation.hotel`
`accommodation.hut`
`accommodation.apartment`
`accommodation.chalet`
`accommodation.guest_house`
`accommodation.hostel`
`accommodation.motel`
`activity`
`activity.community_center`
`activity.sport_club`
`airport`
`airport.private`
`airport.international`
`airport.military`
`airport.gliding`
`airport.airfield`
`commercial`
`commercial.supermarket`
`commercial.marketplace`
`commercial.shopping_mall`
`commercial.department_store`
`commercial.elektronics`
`commercial.outdoor_and_sport`
`commercial.outdoor_and_sport.water_sports`
`commercial.outdoor_and_sport.ski`
`commercial.outdoor_and_sport.diving`
`commercial.outdoor_and_sport.hunting`
`commercial.outdoor_and_sport.bicycle`
`commercial.outdoor_and_sport.fishing`
`commercial.outdoor_and_sport.golf`
`commercial.vehicle`
`commercial.hobby`
`commercial.hobby.model`
`commercial.hobby.anime`
`commercial.hobby.collecting`
`commercial.hobby.games`
`commercial.hobby.brewing`
`commercial.hobby.photo`
`commercial.hobby.music`
`commercial.hobby.sewing_and_knitting`
`commercial.hobby.art`
`commercial.books`
`commercial.gift_and_souvenir`
`commercial.stationery`
`commercial.newsagent`
`commercial.tickets_and_lottery`
`commercial.clothing`
`commercial.clothing.shoes`
`commercial.clothing.clothes`
`commercial.clothing.underwear`
`commercial.clothing.sport`
`commercial.clothing.men`
`commercial.clothing.women`
`commercial.clothing.kids`
`commercial.clothing.accessories`
`commercial.bag`
`commercial.baby_goods`
`commercial.agrarian`
`commercial.garden`
`commercial.houseware_and_hardware`
`commercial.houseware_and_hardware.doityourself`
`commercial.houseware_and_hardware.hardware_and_tools`
`commercial.houseware_and_hardware.building_materials`
`commercial.houseware_and_hardware.building_materials.paint`
`commercial.houseware_and_hardware.building_materials.glaziery`
`commercial.houseware_and_hardware.building_materials.doors`
`commercial.houseware_and_hardware.building_materials.tiles`
`commercial.houseware_and_hardware.building_materials.windows`
`commercial.houseware_and_hardware.building_materials.flooring`
`commercial.houseware_and_hardware.fireplace`
`commercial.houseware_and_hardware.swimming_pool`
`commercial.florist`
`commercial.furniture_and_interior`
`commercial.furniture_and_interior.lighting`
`commercial.furniture_and_interior.curtain`
`commercial.furniture_and_interior.carpet`
`commercial.furniture_and_interior.kitchen`
`commercial.furniture_and_interior.bed`
`commercial.furniture_and_interior.bathroom`
`commercial.chemist`
`commercial.health_and_beauty`
`commercial.health_and_beauty.pharmacy`
`commercial.health_and_beauty.optician`
`commercial.health_and_beauty.medical_supply`
`commercial.health_and_beauty.hearing_aids`
`commercial.health_and_beauty.herbalist`
`commercial.health_and_beauty.cosmetics`
`commercial.health_and_beauty.wigs`
`commercial.toy_and_game`
`commercial.pet`
`commercial.food_and_drink`
`commercial.food_and_drink.bakery`
`commercial.food_and_drink.deli`
`commercial.food_and_drink.frozen_food`
`commercial.food_and_drink.pasta`
`commercial.food_and_drink.spices`
`commercial.food_and_drink.organic`
`commercial.food_and_drink.honey`
`commercial.food_and_drink.rice`
`commercial.food_and_drink.nuts`
`commercial.food_and_drink.health_food`
`commercial.food_and_drink.ice_cream`
`commercial.food_and_drink.seafood`
`commercial.food_and_drink.fruit_and_vegetable`
`commercial.food_and_drink.farm`
`commercial.food_and_drink.confectionery`
`commercial.food_and_drink.chocolate`
`commercial.food_and_drink.butcher`
`commercial.food_and_drink.cheese_and_dairy`
`commercial.food_and_drink.drinks`
`commercial.food_and_drink.coffee_and_tea`
`commercial.convenience`
`commercial.discount_store`
`commercial.smoking`
`commercial.second_hand`
`commercial.gas`
`commercial.weapons`
`commercial.pyrotechnics`
`commercial.energy`
`commercial.wedding`
`commercial.jewelry`
`commercial.watches`
`commercial.art`
`commercial.antiques`
`commercial.video_and_music`
`commercial.erotic`
`commercial.trade`
`commercial.kiosk`
`catering`
`catering.restaurant`
`catering.restaurant.pizza`
`catering.restaurant.burger`
`catering.restaurant.regional`
`catering.restaurant.italian`
`catering.restaurant.chinese`
`catering.restaurant.sandwich`
`catering.restaurant.chicken`
`catering.restaurant.mexican`
`catering.restaurant.japanese`
`catering.restaurant.american`
`catering.restaurant.kebab`
`catering.restaurant.indian`
`catering.restaurant.asian`
`catering.restaurant.sushi`
`catering.restaurant.french`
`catering.restaurant.german`
`catering.restaurant.thai`
`catering.restaurant.greek`
`catering.restaurant.seafood`
`catering.restaurant.fish_and_chips`
`catering.restaurant.steak_house`
`catering.restaurant.international`
`catering.restaurant.tex-mex`
`catering.restaurant.vietnamese`
`catering.restaurant.turkish`
`catering.restaurant.korean`
`catering.restaurant.noodle`
`catering.restaurant.barbecue`
`catering.restaurant.spanish`
`catering.restaurant.fish`
`catering.restaurant.ramen`
`catering.restaurant.mediterranean`
`catering.restaurant.friture`
`catering.restaurant.beef_bowl`
`catering.restaurant.lebanese`
`catering.restaurant.wings`
`catering.restaurant.georgian`
`catering.restaurant.tapas`
`catering.restaurant.indonesian`
`catering.restaurant.arab`
`catering.restaurant.portuguese`
`catering.restaurant.russian`
`catering.restaurant.filipino`
`catering.restaurant.african`
`catering.restaurant.malaysian`
`catering.restaurant.caribbean`
`catering.restaurant.peruvian`
`catering.restaurant.bavarian`
`catering.restaurant.brazilian`
`catering.restaurant.curry`
`catering.restaurant.dumpling`
`catering.restaurant.persian`
`catering.restaurant.argentinian`
`catering.restaurant.oriental`
`catering.restaurant.balkan`
`catering.restaurant.moroccan`
`catering.restaurant.pita`
`catering.restaurant.ethiopian`
`catering.restaurant.taiwanese`
`catering.restaurant.latin_american`
`catering.restaurant.hawaiian`
`catering.restaurant.irish`
`catering.restaurant.austrian`
`catering.restaurant.croatian`
`catering.restaurant.danish`
`catering.restaurant.tacos`
`catering.restaurant.bolivian`
`catering.restaurant.hungarian`
`catering.restaurant.western`
`catering.restaurant.european`
`catering.restaurant.jamaican`
`catering.restaurant.cuban`
`catering.restaurant.soup`
`catering.restaurant.uzbek`
`catering.restaurant.nepalese`
`catering.restaurant.czech`
`catering.restaurant.syrian`
`catering.restaurant.afghan`
`catering.restaurant.malay`
`catering.restaurant.chili`
`catering.restaurant.belgian`
`catering.restaurant.ukrainian`
`catering.restaurant.swedish`
`catering.restaurant.pakistani`
`catering.fast_food`
`catering.fast_food.pizza`
`catering.fast_food.burger`
`catering.fast_food.sandwich`
`catering.fast_food.kebab`
`catering.fast_food.fish_and_chips`
`catering.fast_food.noodle`
`catering.fast_food.ramen`
`catering.fast_food.wings`
`catering.fast_food.tapas`
`catering.fast_food.pita`
`catering.fast_food.tacos`
`catering.fast_food.soup`
`catering.fast_food.salad`
`catering.fast_food.hot_dog`
`catering.cafe`
`catering.cafe.waffle`
`catering.cafe.ice_cream`
`catering.cafe.coffee_shop`
`catering.cafe.donut`
`catering.cafe.crepe`
`catering.cafe.bubble_tea`
`catering.cafe.cake`
`catering.cafe.frozen_yogurt`
`catering.cafe.dessert`
`catering.cafe.coffee`
`catering.cafe.tea`
`catering.food_court`
`catering.bar`
`catering.pub`
`catering.ice_cream`
`catering.biergarten`
`catering.taproom`
`emergency`
`emergency.fire_hydrant`
`emergency.fire_service_inlet`
`emergency.suction_point`
`emergency.defibrillator`
`emergency.water_tank`
`emergency.phone`
`emergency.assembly_point`
`emergency.fire_extinguisher`
`education`
`education.school`
`education.driving_school`
`education.music_school`
`education.language_school`
`education.library`
`education.college`
`education.university`
`childcare`
`childcare.kindergarten`
`entertainment`
`entertainment.culture`
`entertainment.culture.theatre`
`entertainment.culture.arts_centre`
`entertainment.culture.gallery`
`entertainment.zoo`
`entertainment.aquarium`
`entertainment.planetarium`
`entertainment.museum`
`entertainment.cinema`
`entertainment.amusement_arcade`
`entertainment.escape_game`
`entertainment.miniature_golf`
`entertainment.bowling_alley`
`entertainment.flying_fox`
`entertainment.theme_park`
`entertainment.water_park`
`entertainment.activity_park`
`entertainment.activity_park.trampoline`
`entertainment.activity_park.climbing`
`healthcare`
`healthcare.clinic_or_praxis`
`healthcare.clinic_or_praxis.allergology`
`healthcare.clinic_or_praxis.vascular_surgery`
`healthcare.clinic_or_praxis.urology`
`healthcare.clinic_or_praxis.trauma`
`healthcare.clinic_or_praxis.rheumatology`
`healthcare.clinic_or_praxis.radiology`
`healthcare.clinic_or_praxis.pulmonology`
`healthcare.clinic_or_praxis.psychiatry`
`healthcare.clinic_or_praxis.paediatrics`
`healthcare.clinic_or_praxis.otolaryngology`
`healthcare.clinic_or_praxis.orthopaedics`
`healthcare.clinic_or_praxis.ophthalmology`
`healthcare.clinic_or_praxis.occupational`
`healthcare.clinic_or_praxis.gynaecology`
`healthcare.clinic_or_praxis.general`
`healthcare.clinic_or_praxis.gastroenterology`
`healthcare.clinic_or_praxis.endocrinology`
`healthcare.clinic_or_praxis.dermatology`
`healthcare.clinic_or_praxis.cardiology`
`healthcare.dentist`
`healthcare.dentist.orthodontics`
`healthcare.hospital`
`healthcare.pharmacy`
`heritage`
`heritage.unesco`
`highway`
`highway.residential`
`highway.public`
`highway.service`
`highway.track`
`highway.footway`
`highway.busway`
`highway.cycleway`
`highway.pedestrian`
`highway.path`
`highway.living_street`
`highway.primary`
`highway.primary.link`
`highway.secondary`
`highway.secondary.link`
`highway.tertiary`
`highway.tertiary.link`
`highway.trunk`
`highway.trunk.link`
`highway.motorway`
`highway.motorway.junction`
`highway.motorway.link`
`leisure`
`leisure.picnic`
`leisure.picnic.picnic_site`
`leisure.picnic.picnic_table`
`leisure.picnic.bbq`
`leisure.playground`
`leisure.spa`
`leisure.spa.public_bath`
`leisure.spa.sauna`
`leisure.park`
`leisure.park.garden`
`leisure.park.nature_reserve`
`man_made`
`man_made.pier`
`man_made.breakwater`
`man_made.tower`
`man_made.water_tower`
`man_made.bridge`
`man_made.lighthouse`
`man_made.windmill`
`man_made.watermill`
`natural`
`natural.forest`
`natural.water`
`natural.water.spring`
`natural.water.reef`
`natural.water.hot_spring`
`natural.water.geyser`
`natural.water.sea`
`natural.mountain`
`natural.mountain.peak`
`natural.mountain.glacier`
`natural.mountain.cliff`
`natural.mountain.rock`
`natural.mountain.cave_entrance`
`natural.sand`
`natural.sand.dune`
`natural.protected_area`
`national_park`
`office`
`office.government`
`office.government.administrative`
`office.government.register_office`
`office.government.tax`
`office.government.public_service`
`office.government.ministry`
`office.government.healthcare`
`office.government.prosecutor`
`office.government.transportation`
`office.government.social_services`
`office.government.legislative`
`office.government.education`
`office.government.customs`
`office.government.social_security`
`office.government.environment`
`office.government.migration`
`office.government.cadaster`
`office.government.forestry`
`office.government.agriculture`
`office.company`
`office.estate_agent`
`office.insurance`
`office.lawyer`
`office.telecommunication`
`office.educational_institution`
`office.association`
`office.non_profit`
`office.diplomatic`
`office.it`
`office.accountant`
`office.employment_agency`
`office.religion`
`office.research`
`office.architect`
`office.financial`
`office.tax_advisor`
`office.advertising_agency`
`office.notary`
`office.newspaper`
`office.political_party`
`office.logistics`
`office.energy_supplier`
`office.travel_agent`
`office.financial_advisor`
`office.consulting`
`office.foundation`
`office.coworking`
`office.water_utility`
`office.forestry`
`office.charity`
`office.security`
`parking`
`parking.cars`
`parking.cars.surface`
`parking.cars.multistorey`
`parking.cars.underground`
`parking.cars.rooftop`
`parking.surface`
`parking.multistorey`
`parking.underground`
`parking.rooftop`
`parking.motorcycle`
`parking.bicycles`
`pet`
`pet.shop`
`pet.veterinary`
`pet.service`
`pet.dog_park`
`power`
`power.generator`
`power.generator.solar`
`power.generator.wind`
`power.generator.gas`
`power.generator.biomass`
`power`
`power.generator`
`power.generator.solar`
`power.generator.wind`
`power.generator.gas`
`power.generator.biomass`
`power.generator.hydro`
`power.generator.oil`
`power.generator.coal`
`power.generator.nuclear`
`power.generator.geothermal`
`power.line`
`power.minor_line`
`power.plant`
`power.plant.solar`
`power.plant.hydro`
`power.plant.wind`
`power.plant.gas`
`power.plant.coal`
`power.plant.biomass`
`power.plant.oil`
`power.plant.waste`
`power.plant.geothermal`
`power.plant.nuclear`
`power.substation`
`power.transformer`
`production`
`production.factory`
`production.winery`
`production.brewery`
`production.cheese`
`production.pottery`
`railway`
`railway.train`
`railway.subway`
`railway.tram`
`railway.light_rail`
`railway.funicular`
`railway.construction`
`railway.underground`
`railway.surface`
`rental`
`rental.car`
`rental.storage`
`rental.bicycle`
`rental.boat`
`rental.ski`
`service`
`service.financial`
`service.financial.atm`
`service.financial.payment_terminal`
`service.financial.bank`
`service.financial.bureau_de_change`
`service.financial.money_transfer`
`service.financial.money_lender`
`service.cleaning`
`service.cleaning.lavoir`
`service.cleaning.laundry`
`service.cleaning.dry_cleaning`
`service.travel_agency`
`service.post`
`service.post.office`
`service.post.box`
`service.police`
`service.fire_station`
`service.ambulance_station`
`service.vehicle`
`service.vehicle.fuel`
`service.vehicle.car_wash`
`service.vehicle.charging_station`
`service.vehicle.repair`
`service.vehicle.repair.car`
`service.vehicle.repair.motorcycle`
`service.beauty`
`service.beauty.hairdresser`
`service.beauty.spa`
`service.beauty.massage`
`service.tailor`
`service.funeral_directors`
`service.bookmaker`
`service.estate_agent`
`service.locksmith`
`service.taxi`
`service.social_facility`
`service.social_facility.shelter`
`service.social_facility.food`
`service.social_facility.clothers`
`service.recycling`
`service.recycling.container`
`service.recycling.centre`
`service.recycling.bin`
`tourism`
`tourism.information`
`tourism.information.office`
`tourism.information.map`
`tourism.information.ranger_station`
`tourism.attraction`
`tourism.attraction.artwork`
`tourism.attraction.viewpoint`
`tourism.attraction.fountain`
`tourism.attraction.clock`
`tourism.sights`
`tourism.sights.place_of_worship`
`tourism.sights.place_of_worship.church`
`tourism.sights.place_of_worship.chapel`
`tourism.sights.place_of_worship.cathedral`
`tourism.sights.place_of_worship.mosque`
`tourism.sights.place_of_worship.synagogue`
`tourism.sights.place_of_worship.temple`
`tourism.sights.place_of_worship.shrine`
`tourism.sights.monastery`
`tourism.sights.city_hall`
`tourism.sights.conference_centre`
`tourism.sights.lighthouse`
`tourism.sights.windmill`
`tourism.sights.tower`
`tourism.sights.battlefield`
`tourism.sights.fort`
`tourism.sights.castle`
`tourism.sights.ruines`
`tourism.sights.archaeological_site`
`tourism.sights.city_gate`
`tourism.sights.bridge`
`tourism.sights.memorial`
`tourism.sights.memorial.aircraft`
`tourism.sights.memorial.locomotive`
`tourism.sights.memorial.railway_car`
`tourism.sights.memorial.ship`
`tourism.sights.memorial.tank`
`tourism.sights.memorial.tomb`
`tourism.sights.memorial.monument`
`tourism.sights.memorial.wayside_cross`
`tourism.sights.memorial.boundary_stone`
`tourism.sights.memorial.pillory`
`tourism.sights.memorial.milestone`
`religion`
`religion.place_of_worship`
`religion.place_of_worship.buddhism`
`religion.place_of_worship.christianity`
`religion.place_of_worship.hinduism`
`religion.place_of_worship.islam`
`religion.place_of_worship.judaism`
`religion.place_of_worship.shinto`
`religion.place_of_worship.sikhism`
`religion.place_of_worship.multifaith`
`camping`
`camping.camp_pitch`
`camping.camp_site`
`camping.summer_camp`
`camping.caravan_site`
`amenity`
`amenity.toilet`
`amenity.drinking_water`
`amenity.give_box`
`amenity.give_box.food`
`amenity.give_box.books`
`beach`
`beach.beach_resort`
`adult`
`adult.nightclub`
`adult.stripclub`
`adult.swingerclub`
`adult.brothel`
`adult.casino`
`adult.adult_gaming_centre`
`airport`
`airport.international`
`building`
`building.residential`
`building.commercial`
`building.industrial`
`building.office`
`building.catering`
`building.healthcare`
`building.university`
`building.college`
`building.dormitory`
`building.school`
`building.driving_school`
`building.kindergarten`
`building.public_and_civil`
`building.sport`
`building.spa`re
`building.place_of_worship`
`building.holiday_house`
`building.accommodation`
`building.tourism`
`building.transportation`
`building.military`
`building.service`
`building.facility`
`building.garage`
`building.parking`
`building.toilet`
`building.prison`
`building.entertainment`
`building.historic`
`ski`
`ski.lift`
`ski.lift.cable_car`
`ski.lift.gondola`
`ski.lift.mixed_lift`
`ski.lift.chair_lift`
`ski.lift.tow_line`
`ski.lift.magic_carpet`
`sport`
`sport.stadium`
`sport.dive_centre`
`sport.horse_riding`
`sport.ice_rink`
`sport.pitch`
`sport.sports_centre`
`sport.swimming_pool`
`sport.track`
`sport.fitness`
`sport.fitness.fitness_centre`
`sport.fitness.fitness_station`
`public_transport`
`public_transport.train`
`public_transport.light_rail`
`public_transport.monorail`
`public_transport.subway`
`public_transport.subway.entrance`
`public_transport.bus`
`public_transport.tram`
`public_transport.ferry`
`public_transport.aerialway`
`administrative`
`administrative.continent_level`
`administrative.country_level`
`administrative.country_part_level`
`administrative.state_level`
`administrative.county_level`
`administrative.city_level`
`administrative.district_level`
`administrative.suburb_level`
`administrative.neighbourhood_level`
`postal_code`
`political`
`low_emission_zone`
`populated_place`
`populated_place.hamlet`
`populated_place.village`
`populated_place.neighbourhood`
`populated_place.suburb`
`populated_place.town`
`populated_place.city_block`
`populated_place.quarter`
`populated_place.city`
`populated_place.allotments`
`populated_place.county`
`populated_place.municipality`
`populated_place.district`
`populated_place.region`
`populated_place.state`
`populated_place.borough`
`populated_place.subdistrict`
`populated_place.province`
`populated_place.township`
`production`
`production.factory`
`production.winery`
`production.brewery`
`production.cheese`
`production.pottery`
"""



from openai import OpenAI
from google.colab import userdata
import json
import gradio as gr

openai_key = userdata.get('OPENAI_API_KEY')
geo_api_key = userdata.get('GEO_API_KEY')

import requests
from requests.structures import CaseInsensitiveDict

def get_competitors_data(category="commercial",limit=50,place_id="51d8aaf091586a414059288705ad76154040f00102f9015f13990300000000c002089203084865727a6c697961"):
  print(f"get_competitors_data: category-{category} place_id={place_id}")
  url = f"https://api.geoapify.com/v2/places?categories={category}&filter=place:{place_id}&limit={limit}&apiKey={geo_api_key}"
  response = requests.get(url)
  result = response.json()
  websites = []
  print(f"result: {result}")
  print(result.get("features"))
  for item in result["features"]:
    if "website" in item["properties"] and item["properties"]["website"]:
      websites.append(item["properties"]["website"])
  return websites

def get_place_id(city):
  print(f"get_place_id city: {city}")

  url = f"https://api.geoapify.com/v1/geocode/search?text={city}&filter=countrycode:il&apiKey={geo_api_key}"
  response = requests.get(url)
  place_id = response.json()['features'][0].get("properties")['place_id']
  return place_id

import re
from urllib.parse import urlparse
def is_business_website(url):
    """Checks if a URL is likely a business website and not a social media page."""

    # Define patterns for common social media sites
    social_media_patterns = [
        r"facebook\.com",
        r"twitter\.com",
        r"instagram\.com",
        r"linkedin\.com",
        r"youtube\.com",
        r"pinterest\.com",
        # Add more patterns for other social media sites as needed
    ]

    # Check if the URL matches any of the social media patterns
    for pattern in social_media_patterns:
        if re.search(pattern, url, re.IGNORECASE):
            return False  # It's a social media page

    # If it doesn't match any social media patterns, assume it's a business website
    return True
def get_homepage_url(url):
    """Extracts the main domain and constructs the homepage URL."""
    parsed_url = urlparse(url)
    main_domain = parsed_url.netloc  # Get the domain (e.g., www.example.com)

    # Construct homepage URL (https://www.example.com)
    homepage_url = f"{parsed_url.scheme}://{main_domain}"

    return homepage_url

from bs4 import BeautifulSoup
from urllib.parse import urlparse, urljoin

def extract_data(websites):
  print(f"extract_data: {websites}")
  websites_data = []
  for website in websites:
    if is_business_website(website):
      homepage = get_homepage_url(website)
      data = extract_and_clean_website_data(homepage, base_url=None)
      websites_data = {"url":website, "data":data}
  return websites_data

def extract_and_clean_website_data(url, base_url=None):

    """
    Extracts text content from a website, removes unnecessary links,
    and returns the cleaned text.

    Args:
        url (str): The URL of the website to scrape.
        base_url (str, optional): The base URL of the website.
                                   If None, it will be inferred from the URL.
                                   Useful for resolving relative links.
                                   Defaults to None.

    Returns:
        str: The extracted and cleaned text content of the website.
             Returns None if the request fails.
    """
    headers = {
 "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36"
}
    try:
        response = requests.get(url,headers=headers,timeout=10)
        response.raise_for_status()  # Raise an exception for bad status codes
        soup = BeautifulSoup(response.content, 'html.parser')
        links = [link.get('href') for link in soup.find_all('a')]
    except requests.exceptions.RequestException as e:
        print(f"Error fetching URL '{url}': {e}")
        return None

    if base_url is None:
        base_url = urlparse(url).netloc
        print(base_url)
        if not base_url.startswith("http"):
            base_url = f"{urlparse(url).scheme}://{base_url}"

    # Remove script and style elements
    for script in soup.find_all('script'):
        script.decompose()
    for style in soup.find_all('style'):
        style.decompose()

    # Extract all text content
    text_parts = soup.stripped_strings
    full_text = "\n".join(text_parts)

    return full_text

# Commented out IPython magic to ensure Python compatibility.
openai = OpenAI(api_key=openai_key)

system_message = """
You are a market analysis agent specializing in competitive intelligence for small businesses. Your objective is to conduct a thorough competitive analysis for the client, enabling them to understand their market position and identify strategic opportunities for business improvement and customer acquisition. You are equipped with the following tools, which you should utilize judiciously and in the specified order to gather and process competitive data:

 When using the 'get_competitors_data' tool, you need to specify a relevant business category to find competitors.
 Here is a comprehensive list of supported categories from the Geoapify API. When calling the tool,
 choose the most appropriate category that best describes the user's business to find relevant competitors in their area.

**Geoapify API Supported Categories:**
# %s

**Example Usage:**

If the user's business is a "pizza place," you would use the category `catering.restaurant.pizza,catering.restaurant.italian,catering.restaurant` (use several categories to find more businesses) with the `get_competitors_data` tool. If it's a "clothing store for women," you would use `commercial.clothing.women`.

Remember to choose the most specific and relevant category for the user's business to get the most accurate competitor data. If you are unsure, you can ask the user for clarification on their business type.
```


<tools>
'get_place_id': This tool retrieves a unique place identifier based on a provided city name. The 'city' parameter should be a string representing the target city (e.g., "Netivot"). The output is a string representing the place ID (e.g., "ChIJD6pJnvN9AhURN9WyDAkoA_Y" for Netivot).

'get_competitors_data': This tool identifies and retrieves relevant data for competitors within the specified geographical area (obtained using 'get_place_id') and business category. The business category should be inferred from the user's business name. This tool will utilize a Geoapify API category to search for competitors. The output is a list of dictionaries, where each dictionary contains competitor information, including their website URL (e.g., [{"website": "https://competitor1.com", "location": {...}}, {"website": "https://competitor2.com", "location": {...}}]).

'extract_data': This tool scrapes and extracts textual content from a list of competitor websites provided as input (a list of URLs from the 'get_competitors_data' output). The output is a list of dictionaries, where each dictionary contains the original URL and the extracted data from that website (e.g., [{"url": "https://competitor1.com", "data": "Extracted content from competitor 1's website."}, {"url": "https://competitor2.com", "data": "Extracted content from competitor 2's website."}]).
</tools>

Your workflow should be as follows:

1.  The user will provide their business name and the city where they operate (currently: Netivot, South District, Israel).
2.  Use the 'get_place_id' tool with the city name ("Netivot") to obtain the relevant place ID for the area.
3.  Analyze the user's business name to infer the most appropriate category to use with the 'get_competitors_data' tool (refer to Geoapify API categories).
4.  Call the 'get_competitors_data' tool using the place ID obtained in step 2 and the inferred business category from step 3 to retrieve a list of competitor websites and their locations.
5.  Call the 'extract_data' tool with the list of competitor website URLs obtained in step 4 to scrape and extract content from each website.
6.  Analyze the extracted data from the competitor websites to identify their strengths, weaknesses, offerings, and strategies.
7.  Based on your analysis of the competitive landscape and the user's presumed business, generate a concise, actionable list of major improvements the client can implement to enhance their business and attract more customers. Ensure these recommendations are strategic and directly address potential areas for competitive advantage.
```""" % (categories)

# Define the function as a tool for the Assistant
get_place_id_tool = {
    "type": "function",
    "function": {
        "name": "get_place_id",
        "description": "Retrieves the place ID for a given city name.",
        "parameters": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string",
                    "description": "The name of the city to retrieve the place ID for (e.g., 'Tel Aviv').",
                }
            },
            "required": ["city"],
        },
    },
}

# Define the function as a tool for the Assistant
get_competitors_data_tool = {
    "type": "function",
    "function": {
        "name": "get_competitors_data",
        "description": "Retrieves a list of competitor websites based on a place ID and business category.",
        "parameters": {
            "type": "object",
            "properties": {
                "place_id": {
                    "type": "string",
                    "description": "The unique identifier for the city or area (obtained from get_place_id).",
                },
                "category": {
                    "type": "string",
                    "description": "The business category to search for competitors (using a Geoapify API category).",
                },
                "limit": {
                    "type": "integer",
                    "description": "The maximum number of competitors to retrieve.",
                },
            },
            "required": ["place_id", "category", "limit"],
        },
    },
}

# Define the function as a tool for the Assistant
extract_data_tool = {
    "type": "function",
    "function": {
        "name": "extract_data",
        "description": "Extracts data from a list of website URLs.",
        "parameters": {
            "type": "object",
            "properties": {
                "websites": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "url",
                        "description": "A URL of a competitor's website to extract data from.",
                    },
                    "description": "A list of competitor website URLs to extract data from.",
                }
            },
            "required": ["websites"],
        },
    },
}

tools = [get_place_id_tool, get_competitors_data_tool, extract_data_tool]

def message_to_gpt(message, history):
    messages = [{"role": "system", "content": system_message}]

    # Build the message history
    for item in history:
        messages.append(item)  # Append each item directly to maintain order

    messages.append({"role": "user", "content": message})

    while True:  # Loop until a final response is received
        response = openai.chat.completions.create(
            model="gpt-4o-mini", messages=messages, tools=tools
        )

        if response.choices[0].finish_reason == "tool_calls":
            tool_call_message = response.choices[0].message
            tool_result = handle_tool_call(tool_call_message)

            messages.append(tool_call_message)
            messages.append(tool_result)

        elif response.choices[0].finish_reason == "stop":
            # The assistant has finished its response
            break

        else:
            # Handle other finish reasons (optional)
            print(f"Unexpected finish reason: {response.choices[0].finish_reason}")
            break  # Or handle differently based on your needs

    # Return the assistant's final response content
    return response.choices[0].message.content

def handle_tool_call(message):
    tool_call = message.tool_calls[0]
    print(f"Inside handle_tool_call with this tool: {tool_call.function.name}")
    arguments = json.loads(tool_call.function.arguments)

    if tool_call.function.name == "extract_data":
        websites = arguments.get("websites")  # Get the 'websites' argument
        tool_result = extract_data(websites)  # Pass 'websites' to extract_data
        response = {
            "role": "tool",
            "content": json.dumps({"competitors_info": tool_result}),  # Return the extracted data directly
            "tool_call_id": tool_call.id
        }

    elif tool_call.function.name == "get_place_id":
        city = arguments.get("city")
        tool_result = get_place_id(city)
        print(f"tool_result: {tool_result}")
        response = {
            "role": "tool",
            "content": json.dumps({"place_id": tool_result}),  # Return place_id as a JSON object
            "tool_call_id": tool_call.id
        }

    elif tool_call.function.name == "get_competitors_data":
        category = arguments.get("category")
        limit = arguments.get("limit")
        place_id = arguments.get("place_id")  # Get the 'place_id' argument
        tool_result = get_competitors_data(category, limit, place_id)  # Pass 'place_id'
        response = {
            "role": "tool",
            "content": json.dumps({"competitor_websites": tool_result}),  # Rename key to 'competitor_websites'
            "tool_call_id": tool_call.id
        }

    else:
        # Handle unknown tool calls (optional)
        response = {
            "role": "tool",
            "content": json.dumps({"error": "Unknown tool call"}),
            "tool_call_id": tool_call.id
        }

    return response

gr.ChatInterface(fn=message_to_gpt, type="messages").launch(debug=True)